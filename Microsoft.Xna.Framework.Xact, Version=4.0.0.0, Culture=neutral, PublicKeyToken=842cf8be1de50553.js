/* Generated by JSIL v0.8.2 build 33997. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm05 = JSIL.DeclareAssembly("Microsoft.Xna.Framework.Xact, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Xna");
JSIL.DeclareNamespace("Microsoft.Xna.Framework");
JSIL.DeclareNamespace("Microsoft.Xna.Framework.Audio");
/* delegate Microsoft.Xna.Framework.Audio.CueDestroyedEventHandler */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Audio.CueDestroyedEventHandler", false, [], 
  JSIL.MethodSignature.Action($asm06.TypeRef("System.UInt32")));

/* class Microsoft.Xna.Framework.Audio.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.UnsafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "add_CueDestroyed", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.Xna.Framework.Audio.CueDestroyedEventHandler"))
    );

    $.ExternalMethod({Static:true , Public:true }, "AllocateArrayAndReadFile", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Pointer", [$jsilcore.TypeRef("JSIL.Pointer", [$asm06.TypeRef("System.Void")])]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm06.TypeRef("System.UInt32")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "raise_CueDestroyed", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:true , Public:true }, "RaiseDestroyed", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:true , Public:true }, "remove_CueDestroyed", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.Xna.Framework.Audio.CueDestroyedEventHandler"))
    );

    $.Field({Static:true , Public:false}, "$lbacking_store$gCueDestroyed", $asm05.TypeRef("Microsoft.Xna.Framework.Audio.CueDestroyedEventHandler"));

    $.Field({Static:true , Public:true }, "pSyncObject", $.Object);

    $.Event({Static:true , Public:true }, "CueDestroyed", $asm05.TypeRef("Microsoft.Xna.Framework.Audio.CueDestroyedEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.UnsafeNativeMethods+Engine */ 

(function Engine$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.UnsafeNativeMethods+Engine", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Apply3D", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.UInt32, 
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm06.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Pointer", [$asm06.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateHandle", 
      new JSIL.MethodSignature($.UInt32, [
          $.String, $.Int32, 
          $.UInt32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCategory", 
      new JSIL.MethodSignature($.UInt16, [
          $.UInt32, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetGlobalVariable", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetRenderDetails", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetRendererCount", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Pause", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.UInt16, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReleaseHandle", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.IntPtr, 
          $.IntPtr, $.IntPtr
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetGlobalVariable", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.Int32, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetVolume", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.UInt16, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Stop", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.UInt16, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Update", 
      JSIL.MethodSignature.Action($.UInt32)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.UnsafeNativeMethods+WaveBank */ 

(function WaveBank$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.UnsafeNativeMethods+WaveBank", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateHandle", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateStreamingHandle", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.IntPtr, 
          $.UInt32, $.Int16
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetStatus", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReleaseHandle", 
      new JSIL.MethodSignature(null, [$.UInt32, $.IntPtr])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.UnsafeNativeMethods+Cue */ 

(function Cue$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.UnsafeNativeMethods+Cue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "GetStatus", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetVariable", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Pause", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Play", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:true , Public:true }, "SetVariable", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.Int32, $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Stop", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32, $.UInt32])
    );

    $.Field({Static:true , Public:true }, "gCurrentlyDestroyingCue", $.IntPtr);


    function Cue__cctor () {
      $thisType.gCurrentlyDestroyingCue = new $asm06.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Cue__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.UnsafeNativeMethods+SoundBank */ 

(function SoundBank$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.UnsafeNativeMethods+SoundBank", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateHandle", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCue", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetStatus", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "PlayCue", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReleaseHandle", 
      new JSIL.MethodSignature(null, [$.UInt32, $.IntPtr])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("$lCrtImplementationDetails$g");
/* class <CrtImplementationDetails>.ModuleLoadException */ 

(function ModuleLoadException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Exception"), 
      Name: "<CrtImplementationDetails>.ModuleLoadException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm06.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:true }, "Nested", $.String, "A nested exception occurred after the primary exception that caused the C++ module to fail to load.\n");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <CrtImplementationDetails>.ModuleLoadExceptionHandlerException */ 

(function ModuleLoadExceptionHandlerException$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm05.TypeRef("<CrtImplementationDetails>.ModuleLoadException"), 
      Name: "<CrtImplementationDetails>.ModuleLoadExceptionHandlerException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.Exception"), 
          $asm06.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NestedException", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm06.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_NestedException", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "formatString", $.String, "\n{0}: {1}\n--- Start of primary exception ---\n{2}\n--- End of primary exception ---\n\n--- Start of nested exception ---\n{3}\n--- End of nested exception ---\n");

    $.Field({Static:false, Public:false}, "$lbacking_store$gNestedException", $asm06.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true }, "NestedException", $asm06.TypeRef("System.Exception"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <CrtImplementationDetails>.ModuleUninitializer */ 

(function ModuleUninitializer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Collections.Stack"), 
      Name: "<CrtImplementationDetails>.ModuleUninitializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddHandler", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler"))
    )
      .Attribute($asm06.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SingletonDomainUnload", 
      new JSIL.MethodSignature(null, [$.Object, $asm06.TypeRef("System.EventArgs")])
    )
      .Attribute($asm06.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm06.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.Field({Static:true , Public:false}, "lock", $.Object);

    $.Field({Static:true , Public:false}, "_ModuleUninitializer", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Audio.RendererDetail */ 

(function RendererDetail$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Audio.RendererDetail", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FriendlyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RendererId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "_id", $.String);

    $.Property({Static:false, Public:true }, "FriendlyName", $.String);

    $.Property({Static:false, Public:true }, "RendererId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.Cue */ 

(function Cue$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.Cue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.String, 
          $.UInt32, $asm05.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Disposing", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Apply3D", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener"), $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCreated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPaused", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPlaying", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPrepared", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPreparing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsStopped", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsStopping", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetVariable", 
      new JSIL.MethodSignature($.Single, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Pause", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Play", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Disposing", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Resume", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetVariable", 
      new JSIL.MethodSignature(null, [$.String, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.Xna.Framework.Audio.AudioStopOptions"))
    );

    $.Field({Static:false, Public:false}, "cueHandle", $.UInt32);

    $.Field({Static:false, Public:false}, "engineHandle", $.UInt32);

    $.Field({Static:false, Public:false}, "applied3D", $.Boolean);

    $.Field({Static:false, Public:false}, "played", $.Boolean);

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "parent", $asm05.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"));

    $.Field({Static:false, Public:false}, "_isDisposed", $.Boolean);

    $.Field({Static:false, Public:false}, "Disposing", $asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IsCreated", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPreparing", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPrepared", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPlaying", $.Boolean);

    $.Property({Static:false, Public:true }, "IsStopping", $.Boolean);

    $.Property({Static:false, Public:true }, "IsStopped", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPaused", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Event({Static:false, Public:true }, "Disposing", $asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Audio.AudioStopOptions */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Audio.AudioStopOptions", 
    BaseType: $asm06.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    AsAuthored: 0, 
    Immediate: 1, 
  }
);

/* class Microsoft.Xna.Framework.Audio.SoundBank */ 

(function SoundBank$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.SoundBank", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Disposing", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsInUse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCue", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.Xna.Framework.Audio.Cue"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "PlayCue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "PlayCue", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Disposing", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]))
    );

    $.Field({Static:false, Public:false}, "soundBankHandle", $.UInt32);

    $.Field({Static:false, Public:false}, "engineHandle", $.UInt32);

    $.Field({Static:false, Public:false}, "pCleanupData", $.IntPtr);

    $.Field({Static:false, Public:false}, "parent", $asm05.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"));

    $.Field({Static:false, Public:false}, "_isDisposed", $.Boolean);

    $.Field({Static:false, Public:false}, "Disposing", $asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]));

    $.Property({Static:false, Public:true }, "IsInUse", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Event({Static:false, Public:true }, "Disposing", $asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.WaveBank */ 

(function WaveBank$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.WaveBank", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $.String, 
          $.Int32, $.Int16
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Disposing", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckWaveBankHeader", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsInUse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPrepared", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Disposing", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]))
    );

    $.Field({Static:false, Public:false}, "waveBankHandle", $.UInt32);

    $.Field({Static:false, Public:false}, "engineHandle", $.UInt32);

    $.Field({Static:false, Public:false}, "pFileStream", $asm06.TypeRef("System.IO.FileStream"));

    $.Field({Static:false, Public:false}, "pCleanupData", $.IntPtr);

    $.Field({Static:false, Public:false}, "parent", $asm05.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"));

    $.Field({Static:false, Public:false}, "_isDisposed", $.Boolean);

    $.Field({Static:false, Public:false}, "Disposing", $asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]));

    $.Property({Static:false, Public:true }, "IsInUse", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPrepared", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Event({Static:false, Public:true }, "Disposing", $asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Audio.AudioCategory */ 

(function AudioCategory$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Audio.AudioCategory", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "Pause", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Resume", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetVolume", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.Xna.Framework.Audio.AudioStopOptions"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_parent", $asm05.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"));

    $.Field({Static:false, Public:false}, "_category", $.UInt16);

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.AudioEngine */ 

(function AudioEngine$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.AudioEngine", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm06.TypeRef("System.TimeSpan"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "$l.ctor$gb__0", 
      JSIL.MethodSignature.Action($.UInt32)
    )
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "add_Disposing", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddInstance", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RendererDetails", 
      JSIL.MethodSignature.Return($asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm05.TypeRef("Microsoft.Xna.Framework.Audio.RendererDetail")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCategory", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.Xna.Framework.Audio.AudioCategory"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetGlobalVariable", 
      new JSIL.MethodSignature($.Single, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotifyDestroyedCue", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:true , Public:false}, "NotifyDestroyedEngine", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Disposing", 
      JSIL.MethodSignature.Action($asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveInstance", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetGlobalVariable", 
      new JSIL.MethodSignature(null, [$.String, $.Single])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:true }, "ContentVersion", $.Int32, 39);

    $.Field({Static:false, Public:false}, "engineHandle", $.UInt32);

    $.Field({Static:false, Public:false}, "destChannelCount", $.Int32);

    $.Field({Static:true , Public:false}, "hasHookedDestroy", $.Boolean);

    $.Field({Static:false, Public:false}, "pSettingsData", $.IntPtr);

    $.Field({Static:false, Public:false}, "p3dAudio", $.IntPtr);

    $.Field({Static:false, Public:false}, "pDsp", $.IntPtr);

    $.Field({Static:false, Public:false}, "_isDisposed", $.Boolean);

    $.Field({Static:false, Public:false}, "Disposing", $asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]));

    $.Field({Static:true , Public:false}, "audioInstances", $asm06.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $asm06.TypeRef("System.WeakReference")]));

    $.Field({Static:true , Public:false}, "pSyncObject", $.Object);

    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate1", $asm05.TypeRef("Microsoft.Xna.Framework.Audio.CueDestroyedEventHandler"))
      .Attribute($asm06.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "RendererDetails", $asm06.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm05.TypeRef("Microsoft.Xna.Framework.Audio.RendererDetail")]));

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Event({Static:false, Public:true }, "Disposing", $asm06.TypeRef("System.EventHandler`1", [$asm06.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm06.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

